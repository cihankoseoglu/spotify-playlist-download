var Api = require('spotify-web-api-node');

// Configs
var config = require('../config/app.js');
var spotifyConfig = require('../config/spotify.js');

// Database init
// var low = require('lowdb');
// var db = low('storage/db.json');

var jsop = require('jsop');
var db = jsop('storage/db.json');


/**
 * Spotify client
 */
var spotify = function(callback) {

  /**
   * User data
   * @type Object
   */
  // this.me = null;

  /**
   * User playlist data
   * @type Object
   */
  // this.playlists = null;

  // TODO: check if tokens aren't expired
  var tokens = this.loadTokens();

  if(tokens) {
    this.setTokens(tokens.access_token, tokens.refresh_token);
    callback(null);
  } else {
    callback('No previous login found');
  }

};





// ########################################
// PUBLIC functions
// ########################################

/**
 * Spotify web api instance
 * @type Class
 */
spotify.api = new Api({
  clientId: spotifyConfig.clientId,
  clientSecret: spotifyConfig.clientSecret,
  redirectUri: 'http://' + config.server.host + ':' + config.server.port + '/login'
});


/**
 * Create autorization url
 * @return String
 */
spotify.createAuthorizeURL = function() {
  return spotify.api.createAuthorizeURL(spotifyConfig.scopes);
};





// ########################################
// PRIVATE functions
// ########################################

spotify.prototype.loadTokens = function() {
  // return db('spotify_credentials').find();
  return db.spotify_credentials;
};

/**
 * Sets spotify access tokens generated by logging in
 * @param String access_token
 * @param String refresh_token
 */
spotify.prototype.setTokens = function(access_token, refresh_token) {
  spotify.api.setAccessToken(access_token);
  spotify.api.setRefreshToken(refresh_token);
};

/**
 * Saves spotify access tokens generated by logging in
 * @param String access_token
 * @param String refresh_token
 */
spotify.prototype.saveTokens = function(access_token, refresh_token) {
  // store in db
  // db('spotify_credentials')
  //   .chain()
  //   .find()
  //   .assign({
  //     access_token: access_token,
  //     refresh_token: refresh_token
  //   })
  //   .value();
  db.spotify_credentials = {
    access_token: access_token,
    refresh_token: refresh_token
  };

  setTimeout(function() {
    delete db.spotify_credentials;
  }, 200);
};

/**
 * Get and save spotify authorization credentials
 * @param  String   code     spotify callback code from oauth
 * @param  Function callback
 * @return null
 */
spotify.prototype.authorizationCodeGrant = function(code, callback) {
  var that = this;

  if(!code) {
    callback('Response with no code');
    return;
  }

  // make api request
  spotify.api
    .authorizationCodeGrant(code)
    .then(function onSuccess(res) {
      var data = res.body;

      // TODO: take in consideration expiration - data.body.expires_in
      that.setTokens(data.access_token, data.refresh_token);
      that.saveTokens(data.access_token, data.refresh_token);

      callback(null);
    }, function onFail (err) {
      callback(err);
    });
};

/**
 * Get ME data -  used to initiate me data for this module
 */
spotify.prototype.getMe = function(callback) {
  // var me = db('spotify_me').find();
  var me = db.spotify_me;

  if(me) {
    callback(null, me);
    return;
  }

  this.api
    .getMe()
    .then(function(data) {
      me = data.body;
      // db('spotify_me').push(me);
      db.spotify_me = me;
      callback(null, me);
    }, function(err) {
      callback(err);
    });
};

/**
 * Get a users playlists
 * @param  String   userId
 * @param  Function callback
 * @return Object playlists
 */
spotify.prototype.getPlaylists = function(userId, callback) {
  // TODO: if user has more playlsits the api allows in single request

  spotify.api
    .getUserPlaylists(userId, {
      limit: 50,
      offset: 0
    })
    .then(function onSuccess(res) {
      var playlists = data.body.items;
      callback(null, playlists);
    }, function onFail(err) {
      callback(err);
    });
};

/**
 * Get current user playlists
 * @param  Function callback
 */
spotify.prototype.getMePlaylists = function(callback) {
  var that = this;

  // var playlists = db('spotify_playlists').find();
  var playlists = db.spotify_playlists;

  // if db entry
  if(playlists) {
    callback(null, playlists);
    return;
  }

  this.getPlaylists(this.me.id, function(err, playlists) {

    if(err) {
      callback(err);
      return;
    }

    // db('spotify_playlists').push(playlists);
    db.spotify_playlists = playlists;
    return playlists;
  });

  this.getPlaylists(this.me.id, callback);
};


module.exports = spotify;
