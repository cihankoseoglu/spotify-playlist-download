var Api = require('spotify-web-api-node');
var async = require('async');

// Configs
var config = require('../config/app.js');
var spotifyConfig = require('../config/spotify.js');

// Database init
var jsop = require('jsop');
var db = jsop('storage/db.json');


/**
 * Spotify client
 */
var Spotify = function(callback) {

  /**
   * User data
   * @type Object
   */
  this.me = null;

  /**
   * User playlist data
   * @type Object
   */
  this.playlists = null;

  // TODO: check if tokens aren't expired
  var tokens = this.loadTokens();

  if(tokens) {
    this.setTokens(tokens.access_token, tokens.refresh_token);

    this.loadUserData(function(err) {
      callback(err);
    });
  } else {
    callback('No previous login found');
  }

};





// ########################################
// PUBLIC functions
// ########################################

/**
 * Spotify web api instance
 * @type Class
 */
Spotify.api = new Api({
  clientId: spotifyConfig.clientId,
  clientSecret: spotifyConfig.clientSecret,
  redirectUri: 'http://' + config.server.host + ':' + config.server.port + '/login'
});


/**
 * Create autorization url
 * @return String
 */
Spotify.createAuthorizeURL = function() {
  return Spotify.api.createAuthorizeURL(spotifyConfig.scopes);
};





// ########################################
// PRIVATE functions
// ########################################

/**
 * Load me info and playlists from database
 * @return void
 */
Spotify.prototype.loadUserData = function(main_callback) {
  var that = this;

  async.series([

    // get me userdata
    function(callback) {
      that.loadMe(function(err, data) {
        callback(err);
      });
    },

    // get me playlists
    function(callback) {
      that.loadMePlaylists(function(err, data) {
        callback(err);
      });
    }

  ], function(err) {
    main_callback(err);
  });
};

/**
 * Load current user Me data from dabase or spotify API and save them to DB and instance
 * @param  Function callback
 */
Spotify.prototype.loadMe = function(callback) {
  var that = this;

  var me = db.spotify_me;

  // if have db entry
  if(me) {
    that.me = me;
    callback(null, me);

  // else load from spotify API
  } else {
    this.getMe(function(err, data) {

      if(!err) {
        db.spotify_me = data;
        that.me = data;
      }

      callback(err, data);
    });
  }
};

Spotify.prototype.loadMePlaylists = function(callback) {
  var that = this;

  var playlists = db.spotify_playlists;

  // if have db entry
  if(playlists) {
    that.playlists = playlists;
    callback(null, playlists);
  } else {
    that.getMePlaylists(function(err, data){

      if(!err) {
        db.spotify_playlists = data;
        that.playlists = data;
      }

      callback(err, data);
    });
  }
};

/**
 * Load spotify api tokens from database
 * @return Object
 */
Spotify.prototype.loadTokens = function() {
  return db.spotify_credentials;
};

/**
 * Sets spotify access tokens generated by logging in
 * @param String access_token
 * @param String refresh_token
 */
Spotify.prototype.setTokens = function(access_token, refresh_token) {
  Spotify.api.setAccessToken(access_token);
  Spotify.api.setRefreshToken(refresh_token);
};

/**
 * Saves spotify access tokens generated by logging in
 * @param String access_token
 * @param String refresh_token
 */
Spotify.prototype.saveTokens = function(access_token, refresh_token) {
  db.spotify_credentials = {
    access_token: access_token,
    refresh_token: refresh_token
  };
};

/**
 * Get and save spotify authorization credentials
 * @param  String   code     spotify callback code from oauth
 * @param  Function callback
 * @return null
 */
Spotify.prototype.authorizationCodeGrant = function(code, callback) {
  var that = this;

  if(!code) {
    callback('Response with no code');
    return;
  }

  // make api request
  Spotify.api
    .authorizationCodeGrant(code)
    .then(function onSuccess(res) {
      var data = res.body;

      // TODO: take in consideration expiration - data.body.expires_in
      that.setTokens(data.access_token, data.refresh_token);
      that.saveTokens(data.access_token, data.refresh_token);

      callback(null);
    }, function onFail (err) {
      callback(err);
    });
};

/**
 * Get ME data from spotify API
 */
Spotify.prototype.getMe = function(callback) {
  Spotify.api
    .getMe()
    .then(function(data) {
      callback(null, data.body);
    }, function(err) {
      callback(err);
    });
};

/**
 * Get a users playlists from spotify API
 * @param  String   userID
 * @param  Function callback
 * @return Object playlists
 */
Spotify.prototype.getPlaylists = function(userID, callback) {
  // TODO: if user has more playlsits the api allows in single request

  Spotify.api
    .getUserPlaylists(userID, {
      limit: 50,
      offset: 0
    })
    .then(function onSuccess(res) {
      callback(null, res.body.items);
    }, function onFail(err) {
      callback(err);
    });
};

/**
 * Get current user playlists from spotify API
 * @param  Function callback
 */
Spotify.prototype.getMePlaylists = function(callback) {
  this.getPlaylists(this.me.id, callback);
};


// module.exports = spotify;
